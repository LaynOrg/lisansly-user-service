name: CI/CD

on:
  workflow_dispatch:
  push:
    branches:
      - master

env:
  APP_NAME: ${{ github.event.repository.name }}

jobs:

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-go@v4
        with:
          go-version: "1.20"
          cache: false

      - name: Linting
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest

  build:
    needs:
      - lint

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-go@v4
        with:
          go-version: "1.20"

      - name: Build
        shell: bash
        run: CGO_ENABLED=0 GOOS=linux go build -o $APP_NAME .

      - name: Upload executable file as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.APP_NAME }}
          path: ${{ env.APP_NAME }}
          if-no-files-found: error

  unit-test:
    needs:
      - build

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-go@v4
        with:
          go-version: "1.20"

      - run: |
          go test -tags=unit -coverprofile coverage.out -covermode count ./...
          go tool cover -func coverage.out

      - uses: actions/upload-artifact@v3
        with:
          name: code-coverage
          path: coverage.out

  code-analysis:
    needs:
      - unit-test

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download coverage output
        uses: actions/download-artifact@v3
        with:
          name: code-coverage

      - name: Code analysis
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}

      - name: Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}

  security-analysis:
    needs:
      - code-analysis

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Run security analysis with gosec
        uses: securego/gosec@master
        with:
          args: ./...

  deploy-to-dev:
    needs:
      - security-analysis

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.APP_NAME }}

      - run: |
          touch env.dev.json
          echo '{
            "IS_AT_REMOTE": true,
            "JWT_PRIVATE_KEY": "${{ secrets.JWT_PRIVATE_KEY }}",
            "JWT_PUBLIC_KEY": "${{ secrets.JWT_PUBLIC_KEY }}",
            "MONGODB_URI": "${{ secrets.DEV_MONGODB_URI }}",
            "MONGODB_USERNAME": "${{ secrets.DEV_MONGODB_USERNAME }}",
            "MONGODB_PASSWORD": "${{ secrets.DEV_MONGODB_PASSWORD }}",
            "MONGODB_DATABASE": "${{ vars.MONGODB_DATABASE }}",
            "MONGODB_USER_COLLECTION": "${{ vars.MONGODB_USER_COLLECTION }}",
            "MONGODB_REFRESH_TOKEN_HISTORY_COLLECTION": "${{ vars.MONGODB_REFRESH_TOKEN_HISTORY_COLLECTION }}"
          }' > env.dev.json

      - uses: serverless/github-action@v3.2
        with:
          args: deploy --stage dev
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  deploy-to-prod:
    needs:
      - deploy-to-dev

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.APP_NAME }}

      - run: |
          touch env.production.json
          echo '{
            "IS_AT_REMOTE": true,
            "JWT_PRIVATE_KEY": "${{ secrets.JWT_PRIVATE_KEY }}",
            "JWT_PUBLIC_KEY": "${{ secrets.JWT_PUBLIC_KEY }}",
            "MONGODB_URI": "${{ secrets.PROD_MONGODB_URI }}",
            "MONGODB_USERNAME": "${{ secrets.PROD_MONGODB_USERNAME }}",
            "MONGODB_PASSWORD": "${{ secrets.PROD_MONGODB_PASSWORD }}",
            "MONGODB_DATABASE": "${{ vars.MONGODB_DATABASE }}",
            "MONGODB_USER_COLLECTION": "${{ vars.MONGODB_USER_COLLECTION }}",
            "MONGODB_REFRESH_TOKEN_HISTORY_COLLECTION": "${{ vars.MONGODB_REFRESH_TOKEN_HISTORY_COLLECTION }}"
          }' > env.production.json

      - uses: serverless/github-action@v3.2
        with:
          args: deploy --stage production
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
