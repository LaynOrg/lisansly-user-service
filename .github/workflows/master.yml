name: CI/CD

on:
  workflow_dispatch:
  push:
    branches:
      - master

jobs:

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: false

      - name: Linting
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest

  build:
    needs:
      - lint

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Build
        shell: bash
        run: |
          make build
          make zip
          rm build/**/bootstrap
          zip -r build.zip build

      - name: Upload build files as artifact
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: build.zip
          if-no-files-found: error

  unit-test:
    needs:
      - build

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Run tests
        run: go test -tags=unit -coverprofile=coverage.out -covermode=atomic ./...

      - name: Code analysis
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}

      - name: Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}

  security-analysis:
    needs:
      - unit-test

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Run security analysis with gosec
        uses: securego/gosec@master
        with:
          args: ./...

  deploy-to-dev:
    environment: dev
    needs:
      - security-analysis

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: build

      - name: Prepare Build Files
        run: |
          unzip build.zip
          rm -rf build.zip

      - name: Download AWS Config
        run: |
          aws s3 cp ${{ secrets.S3_CONFIG_FILE }} .
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ vars.AWS_REGION }}

      - name: Prepare Environment Variables
        run: |
          touch env.dev.json
          echo '{
            "JWT_PRIVATE_KEY": "${{ secrets.JWT_PRIVATE_KEY }}",
            "JWT_PUBLIC_KEY": "${{ secrets.JWT_PUBLIC_KEY }}",
            "DYNAMODB_USER_TABLE": "${{ vars.DYNAMODB_USER_TABLE }}",
            "DYNAMODB_USER_UNIQUENESS_TABLE": "${{ vars.DYNAMODB_USER_UNIQUENESS_TABLE }}",
            "DYNAMODB_REFRESH_TOKEN_HISTORY_TABLE": "${{ vars.DYNAMODB_REFRESH_TOKEN_HISTORY_TABLE }}"
          }' > env.dev.json

      - name: Deploy To Production Environment
        uses: serverless/github-action@v3.2
        with:
          args: deploy --stage dev
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  deploy-to-prod:
    environment: production
    needs:
      - deploy-to-dev

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: build

      - name: Prepare Build Files
        run: |
          unzip build.zip
          rm -rf build.zip

      - name: Download AWS Config
        run: |
          aws s3 cp ${{ secrets.S3_CONFIG_FILE }} .
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ vars.AWS_REGION }}

      - name: Prepare Environment Variables
        run: |
          touch env.production.json
          echo '{
            "JWT_PRIVATE_KEY": "${{ secrets.JWT_PRIVATE_KEY }}",
            "JWT_PUBLIC_KEY": "${{ secrets.JWT_PUBLIC_KEY }}",
            "DYNAMODB_USER_TABLE": "${{ vars.DYNAMODB_USER_TABLE }}",
            "DYNAMODB_USER_UNIQUENESS_TABLE": "${{ vars.DYNAMODB_USER_UNIQUENESS_TABLE }}",
            "DYNAMODB_REFRESH_TOKEN_HISTORY_TABLE": "${{ vars.DYNAMODB_REFRESH_TOKEN_HISTORY_TABLE }}"
          }' > env.production.json

      - name: Deploy To Production Environment
        uses: serverless/github-action@v3.2
        with:
          args: deploy --stage production
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
