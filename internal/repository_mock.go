// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository.go

// Package user is a generated GoMock package.
package user

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// FindRefreshTokenWithUserId mocks base method.
func (m *MockRepository) FindRefreshTokenWithUserId(ctx context.Context, userId string) (*RefreshTokenHistoryTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRefreshTokenWithUserId", ctx, userId)
	ret0, _ := ret[0].(*RefreshTokenHistoryTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRefreshTokenWithUserId indicates an expected call of FindRefreshTokenWithUserId.
func (mr *MockRepositoryMockRecorder) FindRefreshTokenWithUserId(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRefreshTokenWithUserId", reflect.TypeOf((*MockRepository)(nil).FindRefreshTokenWithUserId), ctx, userId)
}

// FindUserWithEmail mocks base method.
func (m *MockRepository) FindUserWithEmail(ctx context.Context, email string) (*Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserWithEmail", ctx, email)
	ret0, _ := ret[0].(*Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserWithEmail indicates an expected call of FindUserWithEmail.
func (mr *MockRepositoryMockRecorder) FindUserWithEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserWithEmail", reflect.TypeOf((*MockRepository)(nil).FindUserWithEmail), ctx, email)
}

// FindUserWithId mocks base method.
func (m *MockRepository) FindUserWithId(ctx context.Context, userId string) (*Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserWithId", ctx, userId)
	ret0, _ := ret[0].(*Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserWithId indicates an expected call of FindUserWithId.
func (mr *MockRepositoryMockRecorder) FindUserWithId(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserWithId", reflect.TypeOf((*MockRepository)(nil).FindUserWithId), ctx, userId)
}

// InsertRefreshTokenHistory mocks base method.
func (m *MockRepository) InsertRefreshTokenHistory(ctx context.Context, refreshTokenHistory *RefreshTokenHistoryTable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRefreshTokenHistory", ctx, refreshTokenHistory)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertRefreshTokenHistory indicates an expected call of InsertRefreshTokenHistory.
func (mr *MockRepositoryMockRecorder) InsertRefreshTokenHistory(ctx, refreshTokenHistory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRefreshTokenHistory", reflect.TypeOf((*MockRepository)(nil).InsertRefreshTokenHistory), ctx, refreshTokenHistory)
}

// InsertUser mocks base method.
func (m *MockRepository) InsertUser(ctx context.Context, user *Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockRepositoryMockRecorder) InsertUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockRepository)(nil).InsertUser), ctx, user)
}

// UpdateUserById mocks base method.
func (m *MockRepository) UpdateUserById(ctx context.Context, userId string, user *UpdateUserPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserById", ctx, userId, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserById indicates an expected call of UpdateUserById.
func (mr *MockRepositoryMockRecorder) UpdateUserById(ctx, userId, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserById", reflect.TypeOf((*MockRepository)(nil).UpdateUserById), ctx, userId, user)
}
